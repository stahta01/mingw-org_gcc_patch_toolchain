diff --git a/gcc/config/i386/mingw32.h b/gcc/config/i386/mingw32.h
--- a/gcc/config/i386/mingw32.h
+++ b/gcc/config/i386/mingw32.h
@@ -253,12 +253,13 @@ do {						         \
 
 /* MS specific format attributes for ms_printf, ms_scanf, ms_strftime.  */
 #undef TARGET_FORMAT_TYPES
 #define TARGET_FORMAT_TYPES mingw_format_attributes
 
+/* MS specific attributes account for 3; adding mingw_printf makes 4.  */
 #undef TARGET_N_FORMAT_TYPES
-#define TARGET_N_FORMAT_TYPES 3
+#define TARGET_N_FORMAT_TYPES 4
 
 #define HAVE_ENABLE_EXECUTE_STACK
 #undef  CHECK_EXECUTE_STACK_ENABLED
 #define CHECK_EXECUTE_STACK_ENABLED flag_setstackexecutable
 
diff --git a/gcc/config/i386/msformat-c.c b/gcc/config/i386/msformat-c.c
--- a/gcc/config/i386/msformat-c.c
+++ b/gcc/config/i386/msformat-c.c
@@ -25,22 +25,41 @@ along with GCC; see the file COPYING3.
 #include "tm.h"
 #include "c-family/c-common.h"
 #include "intl.h"
 #include "c-family/c-format.h"
 
-/* Mingw specific format attributes ms_printf, ms_scanf, and ms_strftime.  */
-
+/* MinGW specific format attributes:
+ * ms_printf, ms_scanf, and ms_strftime are platform defaults,
+ * associated with MSVCRT.DLL function implementations.
+ */
 static format_length_info ms_printf_length_specs[] =
 {
   { "h", FMT_LEN_h, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },
   { "l", FMT_LEN_l, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },
   { "I32", FMT_LEN_l, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
   { "I64", FMT_LEN_ll, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
   { "I", FMT_LEN_L, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
   { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 }
 };
 
+/* MinGW's alternative printf implementation supports a union of
+ * MSVCRT.DLL and ISO-C attributes: designate it as mingw_printf.
+ */
+static format_length_info mingw_printf_length_specs[] =
+{
+  { "h", FMT_LEN_h, STD_C89, "hh", FMT_LEN_hh, STD_C99, 0 },
+  { "l", FMT_LEN_l, STD_C89, "ll", FMT_LEN_ll, STD_C99, 0 },
+  { "I32", FMT_LEN_l, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
+  { "I64", FMT_LEN_ll, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
+  { "I", FMT_LEN_L, STD_EXT, NULL, FMT_LEN_none, STD_C89, 1 },
+  { "L", FMT_LEN_L, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 },
+  { "z", FMT_LEN_z, STD_C99, NULL, FMT_LEN_none, STD_C89, 0 },
+  { "t", FMT_LEN_t, STD_C99, NULL, FMT_LEN_none, STD_C89, 0 },
+  { "j", FMT_LEN_j, STD_C99, NULL, FMT_LEN_none, STD_C89, 0 },
+  { NULL, FMT_LEN_none, STD_C89, NULL, FMT_LEN_none, STD_C89, 0 }
+};
+
 static const format_flag_spec ms_printf_flag_specs[] =
 {
   { ' ',  0, 0, 0, N_("' ' flag"),        N_("the ' ' printf flag"),              STD_C89 },
   { '+',  0, 0, 0, N_("'+' flag"),        N_("the '+' printf flag"),              STD_C89 },
   { '#',  0, 0, 0, N_("'#' flag"),        N_("the '#' printf flag"),              STD_C89 },
@@ -88,22 +107,43 @@ static const format_flag_pair ms_strftim
 };
 
 static const format_char_info ms_print_char_table[] =
 {
   /* C89 conversion specifiers.  */
-  { "di",  0, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  T99_SST,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, "-wp0 +'",  "i",  NULL },
-  { "oxX", 0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, "-wp0#",     "i",  NULL },
-  { "u",   0, STD_C89, { T89_UI,  BADLEN,  T89_US,  T89_UL,  T9L_ULL, T99_ST, BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN,  BADLEN }, "-wp0'",    "i",  NULL },
-  { "fgG", 0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#'", "",   NULL },
-  { "eE",  0, STD_C89, { T89_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#",  "",   NULL },
-  { "c",   0, STD_C89, { T89_I,   BADLEN,  T89_S,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, "-w",        "",   NULL },
-  { "s",   1, STD_C89, { T89_C,   BADLEN,  T89_S,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, "-wp",       "cR", NULL },
-  { "p",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, "-w",        "c",  NULL },
-  { "n",   1, STD_C89, { T89_I,   BADLEN,  T89_S,   T89_L,   T9L_LL,  BADLEN,  BADLEN, BADLEN,  T99_IM,  BADLEN,  BADLEN,  BADLEN }, "",          "W",  NULL },
+  { "di",  0, STD_C89, { T89_I,  BADLEN, T89_S,  T89_L,  T9L_LL,  BADLEN, T99_SST, BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +'",  "i",  NULL },
+  { "oxX", 0, STD_C89, { T89_UI, BADLEN, T89_US, T89_UL, T9L_ULL, BADLEN, T99_ST,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0#",    "i",  NULL },
+  { "u",   0, STD_C89, { T89_UI, BADLEN, T89_US, T89_UL, T9L_ULL, BADLEN, T99_ST,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0'",    "i",  NULL },
+  { "fgG", 0, STD_C89, { T89_D,  BADLEN, BADLEN, T99_D,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#'", "",   NULL },
+  { "eE",  0, STD_C89, { T89_D,  BADLEN, BADLEN, T99_D,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#",  "",   NULL },
+  { "c",   0, STD_C89, { T89_I,  BADLEN, T89_S,  T94_WI, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "",   NULL },
+  { "s",   1, STD_C89, { T89_C,  BADLEN, T89_S,  T94_W,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp",      "cR", NULL },
+  { "p",   1, STD_C89, { T89_V,  BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "c",  NULL },
+  { "n",   1, STD_C89, { T89_I,  BADLEN, T89_S,  T89_L,  T9L_LL,  BADLEN, BADLEN,  BADLEN,  T99_IM,  BADLEN, BADLEN, BADLEN }, "",         "W",  NULL },
   /* X/Open conversion specifiers.  */
-  { "C",   0, STD_EXT, { TEX_WI,  BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, "-w",        "",   NULL },
-  { "S",   1, STD_EXT, { TEX_W,   BADLEN,  T89_S,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN }, "-wp",       "R",  NULL },
+  { "C",   0, STD_EXT, { TEX_WI, BADLEN, T89_S,  BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "",   NULL },
+  { "S",   1, STD_EXT, { TEX_W,  BADLEN, T89_S,  BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp",      "R",  NULL },
+  { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }
+};
+
+static const format_char_info mingw_print_char_table[] =
+{
+  /* C89 conversion specifiers.  */
+  { "di",  0, STD_C89, { T89_I,  T99_SC, T89_S,  T89_L,  T9L_LL,  BADLEN, T99_SST, T99_PD,  T99_IM,  BADLEN, BADLEN, BADLEN }, "-wp0 +'",  "i",  NULL },
+  { "oxX", 0, STD_C89, { T89_UI, T99_UC, T89_US, T89_UL, T9L_ULL, BADLEN, T99_ST,  T99_UPD, T99_UIM, BADLEN, BADLEN, BADLEN }, "-wp0#",    "i",  NULL },
+  { "u",   0, STD_C89, { T89_UI, T99_UC, T89_US, T89_UL, T9L_ULL, BADLEN, T99_ST,  T99_UPD, T99_UIM, BADLEN, BADLEN, BADLEN }, "-wp0'",    "i",  NULL },
+  { "fgG", 0, STD_C89, { T89_D,  BADLEN, BADLEN, T99_D,  BADLEN,  T99_LD, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#'", "",   NULL },
+  { "eE",  0, STD_C89, { T89_D,  BADLEN, BADLEN, T99_D,  BADLEN,  T99_LD, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#",  "",   NULL },
+  { "c",   0, STD_C89, { T89_I,  BADLEN, T89_S,  T94_WI, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "",   NULL },
+  { "s",   1, STD_C89, { T89_C,  BADLEN, T89_S,  T94_W,  BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp",      "cR", NULL },
+  { "p",   1, STD_C89, { T89_V,  BADLEN, BADLEN, BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "c",  NULL },
+  { "n",   1, STD_C89, { T89_I,  T99_SC, T89_S,  T89_L,  T9L_LL,  BADLEN, T99_SST, T99_PD,  T99_IM,  BADLEN, BADLEN, BADLEN }, "",         "W",  NULL },
+  /* C99 conversion specifiers.  */
+  { "F",   0, STD_C99, { T99_D,  BADLEN, BADLEN, T99_D,  BADLEN,  T99_LD, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#'", "",   NULL },
+  { "aA",  0, STD_C99, { T99_D,  BADLEN, BADLEN, T99_D,  BADLEN,  T99_LD, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp0 +#",  "",   NULL },
+  /* X/Open conversion specifiers.  */
+  { "C",   0, STD_EXT, { TEX_WI, BADLEN, T89_S,  BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-w",       "",   NULL },
+  { "S",   1, STD_EXT, { TEX_W,  BADLEN, T89_S,  BADLEN, BADLEN,  BADLEN, BADLEN,  BADLEN,  BADLEN,  BADLEN, BADLEN, BADLEN }, "-wp",      "R",  NULL },
   { NULL,  0, STD_C89, NOLENGTHS, NULL, NULL, NULL }
 };
 
 static const format_char_info ms_scan_char_table[] =
 {
@@ -138,13 +178,19 @@ static const format_char_info ms_time_ch
   /* C99 conversion specifiers.  */
   { "z",		0, STD_C99, NOLENGTHS, "#",      "",  NULL },
   { NULL,		0, STD_C89, NOLENGTHS, NULL, NULL, NULL }
 };
 
-EXPORTED_CONST format_kind_info mingw_format_attributes[3] =
+EXPORTED_CONST format_kind_info mingw_format_attributes[4] =
 {
-  { "ms_printf",   ms_printf_length_specs,  ms_print_char_table, " +#0-'", NULL,
+  { "mingw_printf", mingw_printf_length_specs, mingw_print_char_table, " +#0-'", NULL,
+    ms_printf_flag_specs, ms_printf_flag_pairs,
+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,
+    'w', 0, 'p', 0, 'L', 0,
+    &integer_type_node, &integer_type_node
+  },
+  { "ms_printf", ms_printf_length_specs, ms_print_char_table, " +#0-'", NULL,
     ms_printf_flag_specs, ms_printf_flag_pairs,
     FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,
     'w', 0, 'p', 0, 'L', 0,
     &integer_type_node, &integer_type_node
   },
@@ -162,13 +208,14 @@ EXPORTED_CONST format_kind_info mingw_fo
 };
 
 /* Default overrides for printf, scanf and strftime.  */
 EXPORTED_CONST target_ovr_attr mingw_format_attribute_overrides[4] =
 {
-  { "ms_printf", "printf" },
-  { "ms_scanf", "scanf" },
-  { "ms_strftime", "strftime" }
+  { "ms_printf",   "printf"   },
+  { "ms_scanf",    "scanf"    },
+  { "ms_strftime", "strftime" },
+  {  NULL,	    NULL      }
 };
 
 /* Setup for option Wpedantic-ms-format.  */
 
 #ifdef TARGET_OVERRIDES_FORMAT_INIT
@@ -180,13 +227,13 @@ extern void TARGET_OVERRIDES_FORMAT_INIT
 #define C89_OR_EXT (warn_pedantic_ms_format ? STD_EXT : STD_C89)
 
 void
 TARGET_OVERRIDES_FORMAT_INIT (void)
 {
-  ms_printf_length_specs[2].std = C89_OR_EXT; /* I32 */
-  ms_printf_length_specs[3].std = C89_OR_EXT; /* I64 */
-  ms_printf_length_specs[4].std = C89_OR_EXT; /* I */
+  mingw_printf_length_specs[2].std = ms_printf_length_specs[2].std = C89_OR_EXT; /* I32 */
+  mingw_printf_length_specs[3].std = ms_printf_length_specs[3].std = C89_OR_EXT; /* I64 */
+  mingw_printf_length_specs[4].std = ms_printf_length_specs[4].std = C89_OR_EXT; /* I */
 }
 
 #undef C89_OR_EXT
 
 #endif
